
# src\emu\debug\dvmemory.cpp

void debug_view_memory::write(u8 size, offs_t offs, u64 data)
{
	const debug_view_memory_source &source = downcast<const debug_view_memory_source &>(*m_source);

	// if no raw data, just use the standard debug routines
	if (source.m_space)
	{
		auto dis = machine().disable_side_effects();

		switch (size)
		{
			case 1: machine().debugger().cpu().write_byte(*source.m_space, offs, data, !m_no_translation); break;
			case 2: machine().debugger().cpu().write_word(*source.m_space, offs, data, !m_no_translation); break;
			case 4: machine().debugger().cpu().write_dword(*source.m_space, offs, data, !m_no_translation); break;
			case 8: machine().debugger().cpu().write_qword(*source.m_space, offs, data, !m_no_translation); break;
		}

// ----------------------------------------------------------------
// 新增 - 内存浏览窗口中ROM区域可改写 - START

		// find region with the same name
		if (strcmp(source.m_space->name(),"program") != 0)
			return;
		//memory_region *region = NULL;
		for (auto &region : machine().memory().regions())
		{
			// region found 
			if (strcmp(region.second->name(),source.m_memintf->device().tag()) == 0){

				// offset is inside of region
				if(offs+size <= region.second->bytes()){
					u8* addr = region.second->base() + offs;
					u32 i = 0;
					u8 byte = 0;
					for (i = 0; i < size; i++){
						byte = (u8)((data >> (8*i)) & 0xff);
						*(u8 *)(addr+i) = byte;
					}

				}

				break;
			}
		}

// 新增 - 内存浏览窗口中ROM区域可改写 - END
// ----------------------------------------------------------------

		return;
	}

	// if larger than a byte, reduce by half and recurse
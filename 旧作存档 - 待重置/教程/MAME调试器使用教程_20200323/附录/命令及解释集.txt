
# 帮助相关  help
例句 --
	help cheatinit


---------------------------------------------------------------------------------------------------------

# 内存搜索: ci, cn, cnf, cl, cr, cu

ci (cheat init)  初始化
例句 --
	ci ub/w/d/q  无符号单字节/双字节/四字节/八字节
	ci sb/w/d/q  有符号单字节/双字节/四字节/八字节

cn (cheat next)
例句 --
	cn eq,60  搜寻目标数值等于60 (十六进制)
	cn eq,#60  搜寻目标数值等于60 (十进制)
	cn eq  搜寻目标数值未变化
	cn ne  搜寻目标数值已变化
	cn +  搜寻目标数值已增加
	cn -  搜寻目标数值已减少
	cn +,1  搜寻目标数值已增加1 (十六进制)
	cn -,#1  搜寻目标数值已减少1 (十进制)

cnf (cheat next first)  和首次初始化时数值对比
例句 --
	cnf eq  和首次初始化时数值相比未变化

cl (cheat list)  列出所有搜寻结果
例句 --
	cl xxx.txt  输出所有搜寻结果至xxx.txt, 其输出格式为XML Cheat格式

cr (cheat range)

cu (cheat undo)  撤销上次搜索


---------------------------------------------------------------------------------------------------------

# 内存监视点指令: wp, wplist, wpclear

wp (watch point)
例句 --
	wp 1234,1,r  在地址1234下读取监视点(该地址被读取的时候中断), 数据长度1
	wp 1234,2,w  在地址1234下写入监视点(该地址被写入的时候中断), 数据长度2
	wp 1234,6,rw  在地址1234下读写监视点(该地址被读取或被写入的时候中断), 数据长度6
	wp 23456,a,w,wpdata == 1,g  在地址1234下写入监视点, 数据长度a, 写入的数据等于1，且不中断游戏
	wp 23456,a,w,wpdata != 1  精确查找
	wp 2345,20,r,1,{printf "Read @ %08X\n",wpaddr; g}
	wp 811535,1,r,1,{pc==12FBBC;g}

wpl (watch point list)  列出所有监视点

wpc (watch point clear)
例句 --
	wpclear 3  删除3号监视点
	wpclear  删除所有监视点


---------------------------------------------------------------------------------------------------------

# 程序断点指令: bp, bplist, bpclear

bp (break point)
例句 --
	bp 1234  当程序运行到地址1234的程序代码时会中断
	bp 23456,a0 == 0 && a1 == 0  当程序运行到地址1234，且达成条件a0等于0且a1等于0时会中断

bpl (break point list)  列出所有断点

bpc (break point clear)
例句 --
	bpclear 3  删除3号断点
	bpclear  删除所有断点


---------------------------------------------------------------------------------------------------------

# 跟踪记录指令: trace
例句 --
	trace 1.txt  跟踪当前CPU运行的所有代码, 输出至文件1.txt
	trace off  停止跟踪, 并且关闭文件
	trace 1.txt,0  跟踪编号为0的CPU运行的所有代码, 输出至文件1.txt
	trace off,0  停止跟踪编号为0的CPU, 并且关闭文件
	trace 1.txt,0,{tracelog "A=%02X ",a}  跟踪编号为0的CPU运行的所有代码, 输出至文件1.txt，并在每一行的前面写上"A=a "，"A=%02X ",a为一个C语言printf函数常用的输出格式，意为将a的值代入%02X中, 而02表示两位数, 不足两位时以0填入X表示为大写十六进制数


---------------------------------------------------------------------------------------------------------

# 地址搜索命令：find
例句 --
	如地址 100000的值为 00000001 ， 地址 100004 的值为 00000004 ,

	输入 find 0,200000,d.00000001,d.00000004 可搜索到包含地址 100000 的对应搜索值的地址

	find 后的0为起始地址，后跟的200000为搜索长度，加算，
	其后的d为数据类型，数据类型.数据值，后可接任意多个数据类型.数据值，
	但必须是连续的，某些游戏的地址搜索需要把值的书写反转


---------------------------------------------------------------------------------------------------------

# 内存直接写入指令: maincpu, pro 等
格式为 maincpu.[][]@地址=数据
	第一个[]:o/r /m表示ROM地址，p 表示RAM地址
	第二个[]:常用的 d 表示4字节，w 表示2字节，b 表示1字节

例句 --
	maincpu.ob@1234=FF  在ROM地址1234处, 写入FF一个字节
	maincpu.ow@1234=4E71  在ROM地址1234处, 写入4E 71两个字节
	maincpu.od@1234=600A4E71  在ROM地址1234处, 写入60 0A 4E 71四个字节


---------------------------------------------------------------------------------------------------------

# 反汇编指令：dasm
例句 --
	dasm 1.asm,0,ffff,2  反编译第2个CPU从0至ffff的指令，并以1.asm保存到模拟器根目录


---------------------------------------------------------------------------------------------------------

# 热键:
    ~  中断游戏至调试器
    F5  运行游戏
    F12  运行游戏并隐藏调试窗口
    F11  步入, 单步执行, 会进入子程序
    F10  步过, 单步执行, 不会进入子程序
    Shift+F11  执行子程序到返回
    Ctrl+M  内存浏览窗口
    F6  运行到下个CPU, 有时候~中断游戏会停在音效控制的CPU, 用这指令可以切换到主CPU


---------------------------------------------------------------------------------------------------------

R15 / PC寄存器为本身地址
Enter  单步执行
